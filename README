## 1. Software Application

University has decided to set up a Lottery scheme to raise money for local charities and has started to develop a prototype **Lottery Web Application**. As a software security specialist, the university have asked you to help develop their prototype by **designing and implementing** some basic **functionality and security elements**.

&nbsp;

### Lottery Web Application

The university development team have already implemented a basic Java web application which they have provided for you for further development. The web application consists of the following elements:

- **Java web application**
- **Apache Tomcat Server**
- **MySqL Database**

Because the web application is a prototype, the university development team would like your final submitted program to run using **Docker** to enable them to test it before investing in the hardware and software needed to host the final product. A video showing how to set up and run the software is provided below.

&nbsp;

### PROJECT JAVA CODE

The university development team have uploaded the all the files you need to get started in a zip file for you [here](https://ncl.instructure.com/courses/24641/files/3277301/download?wrap=1). The folder _LotteryWebApp_ is the Java Web Application project which can be opened and worked on in the IntelliJ IDEA.

Currently the _LotteryWebApp_ project consists of the following:

- **_index.jsp -_** An HTML/JSP home page with a basic form to input data.
- **_CreateAccount -_** A Java servlet which:
  - executes when the home page form data is submitted
  - inserts data into a MySQL database table **_userAccounts_**
  - outputs a 'success' message to a **_account.jsp_** HTML/JSP page
  - outputs an 'error' message to the **_error.jsp_** HTML/JSP page
- **_account.jsp -_** An HTML/JSP page which  
  - displays the 'success' from the **_CreateAccount_** servlet
  - contains a submit button to get all current data in the database
- **_UserLogin -_** Another Java servlet which:
  - executes when the HTML page button is pressed on the page **_account.jsp_**
  - queries a MySQL database table **_userAccounts_** for all its data
  - outputs the data retrieved from the MySQL database to an HTML/JSP page **_output.jsp_**
- **_output.jsp -_** An HTML/JSP page which displays the data retrieved from the database in a table and a link back to the home page **_index.jsp_**
- **_error.jsp -_** An HTML/JSP page which displays the 'error' from the **_CreateAccount_** servlet and a link back to the home page **_index.jsp_**

&nbsp;

### DOCKER CONTAINER IMAGES

Inside the Coursework zip file you will find a README with instructions to get the web app running for different options. There are several options when developing:

- **Docker only:** Run tomcat server with web app deployed and MySQL database server in Docker
- **Localhost and Docker:** Run tomcat server with web app deployed on localhost (your computer) and MySQL database server in Docker
- **Localhost:** Run tomcat server with web app deployed and MySQL database server on localhost

I would recommend either of the bottom two options if you can when developing.

When making final submission, please make sure it is set up to run on **Docker only**. Instructions are in the README file (**I will also run through this in an online session**).

### Development Tasks

You will be given a number of tasks to develop the Lottery Web Application some more to add both general functionality and security features.

&nbsp;

#### Task 0 - Initial Task

- **Open** Java project in IntelliJ and familiarise yourself with its structure and code
- **Look** at the README and associated files and familiarise yourself with them
- **Set up** and test the web application you have been given
- You can use any development setup you like:
  - **Full Docker** \- Apache Tomcat Server and MySQL Database Server both running on Docker
  - **Hybrid** - Local installation of Apache Tomcat Server running on own computer with MySQL Database Server running on Docker (my personal favourite)
  - **Full Local** - Local installation of Apache Tomcat Server and MySQL Database Server running on own computer

&nbsp;

#### Task 1 - Data Input

1. **Redevelop** the home page **index.jsp**.
    1. **Create/extend** a registration form for new users which accepts first name, last name, email, phone number, username, and password.
        1. Implement appropriate client side input validation using pure JavaScript or the JavaScript library JQuery.
        2. Email must be a valid email address (look up standards on this).
        3. Phone number must be of the form xx-xxxx-xxxxxxx (e.g. 44-0191-1234567)
        4. Password must contain:
            - Between 8 and 15 characters
            - At least 1 uppercase and 1 lowercase character
            - At least 1 digit
    2. **Create/extend** a login form for existing users which accepts a username and password
        1. Implement appropriate client side input validation using pure JavaScript or the JavaScript library JQuery.
        2. Redevelop the Java servlet **UserLogin** to query the MySQL database table **_userAccounts_** to check if password and username match with an existing account.
            - If login is verified the web application displays a 'login success' message on the **account.jsp** page
            - If login is not verified the web application returns an 'login unsuccessful' message on the **error.jsp** page
2. **Create** a server side filter (Servlet Filter)**:**
    1. Ensure the following are not present in the data submitted via the registration form: &lt;,  &gt;,  !,  {,  } , insert, into, where, script, delete, input.
        1. If not present the web application displays a 'success' message on the **account.jsp** page
        2. If present the web application displays an 'error' message on the **error.jsp** page

...


